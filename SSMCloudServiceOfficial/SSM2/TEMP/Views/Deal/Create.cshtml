@model SSM.Models.Deal
@using SSM.Models
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <!-- Meta, title, CSS, favicons, etc. -->
    <meta charset="utf-8">




</head>


@using (Html.BeginForm("CreateDeal", "Deal", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Deal</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.Value, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Value, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Value, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.Client, "Client", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("Client", (List<SelectListItem>)ViewData["ClientResponsibleFor"], htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Client, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-md-2">Prroduct</label>
            <div class="col-md-10">
                @Html.DropDownList("productID", (List<SelectListItem>)ViewData["ProductResponsibleFor"], htmlAttributes: new { @class = "form-control" })

            </div>
        </div>
       <input type="hidden" value="" name="chooseplan" id="chooseplan"/>
        <div class="form-group">
            <label class="control-label col-md-2">Plan</label>
            <div class="col-md-10">
                @Html.DropDownList("PlanToChoose", new List<SelectListItem>(), htmlAttributes: new { @class = "form-control" })
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>

    foreach (productMarketPlan plan in (List<productMarketPlan>)ViewData["ProductPlan"])
    {
        <script>
            $("#PlanToChoose").append('<option class="productplan product@(plan.softwareProduct.id)" value="@(plan.id)">@(plan.Name)</option>');
        </script>
    }
    <script>
      
        var pid = "";
        function displayplan() {
            if (pid != $("#productID").val()) {
                pid = $("#productID").val();
                $(".productplan").each(function () {
                    $(this).css("display", "none");
                })
                $(".product" + pid).each(function () {
                    $(this).css("display", "");
                })
                
            }
        }
        alert($("#PlanToChoose").val());
        function updateval() {
            $("#chooseplan").val($("#PlanToChoose").val());
        }
        setInterval(displayplan, 100);
        setInterval(updateval, 100);
    </script>

}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
